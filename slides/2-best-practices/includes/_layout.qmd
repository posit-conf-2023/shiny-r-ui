# Layout {data-stack-name="Layout"}

::: grid-intro
::: grid-intro-left
<h4>Grids</h4>

<p>Why?</p>
:::

::: grid-intro-right
::: one
:::

::: two
:::

::: three
:::

::: four
:::

::: five
:::
:::
:::

```{=html}
<!-- 

- Organize the chaos, help our brains to construct desperate things and put them together (you can see this in ancient city planning, it's easier to find a house in a grid!)

- Component - rather than figure out everything at once we can only think about the components. First we just think about the layout, then we can think about the font and colors, it helps us to compartmentalize.

-->
```

------------------------------------------------------------------------

[Symmetry]{.centered-title}

::: balance-symmetry
::: left
:::

::: {.circle .circ-one}
:::

::: {.circle .circ-two}
:::

::: {.circle .circ-three}
:::
:::

------------------------------------------------------------------------

[Symmetry]{.centered-title .move-down}

::: single-image
<img src="https://thespekt.files.wordpress.com/2015/01/human-reflection-symmetry-body.jpg"/>
:::

------------------------------------------------------------------------

[Symmetry]{.centered-title}

::: single-image
<img src="https://th-thumbnailer.cdn-si-edu.com/CbddkFFO3OB80rRz83Iiuf-Z0FY=/1000x750/filters:no_upscale():focal(1471x1061:1472x1062)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/b6/30/b630b48b-7344-4661-9264-186b70531bdc/istock-478831658.jpg"/>
:::

------------------------------------------------------------------------

[Symmetry]{.centered-title}

::: sym-3
::: wix-1
:::

::: wix-2
:::

::: wix-3
:::

::: wix-4
:::
:::

[https://www.siteinspire.com/]{.annotate}

```{css}
.single-image {
  display: grid;
  justify-content: center;
}

.single-image img {
  height: 70%;
}

.sym-img-2 {
    height: 600px;
    margin: 0 auto;
    width: 100%;
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url();
}


.sym-3 {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    flex-direction: row;
    width: 80%;
    margin: 0 auto;
}

.sym-3 div {
    height: 250px;
    width: 400px;
}

.wix-1 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/259/small.jpg");
}

.wix-2 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/390/small.jpg");
}

.wix-3 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/388/medium.jpg");
}

.wix-4 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/358/small.jpg");
}

.annotate {
font-size: 20px;
    text-align: center;
    display: block;
}
```

```{=html}
<!-- 
- Art
- Architecture
- dribbble screenshot (asymmetry leaks in - helps with the rhythm of the piece)
-->
```

------------------------------------------------------------------------

[Symmetry Broken!]{.centered-title}

::: single-image
<img src="https://static.wixstatic.com/media/ea6ac8_b1e158433b5c4b0d885919b7934f4860~mv2.png/v1/fill/w_924,h_540,al_c,q_90,enc_auto/ea6ac8_b1e158433b5c4b0d885919b7934f4860~mv2.png"/> [https://www.wix.com/blog/2022/10/asymmetrical-balance/]{.annotate}
:::

```{=html}
<!--
- when you do break it your eye immediatly goes to the part of the piece where the symmetry was broken (with example and arrow)

- but pure symmetry can start to look really boring (I wouldnt be like OMG I need to share this link of a website I saw with you that was entirely symmetric)
-->
```

------------------------------------------------------------------------

[Asymmetry]{.centered-title}

::: balance-symmetry
::: left
:::

::: {.async-circle .left-1}
:::

::: {.async-circle .left-2}
:::

::: {.async-circle .left-3}
:::

::: {.async-circle .right-1}
:::

::: {.async-circle .right-2}
:::

::: {.async-circle .right-3}
:::
:::

```{css}
.async-circle {
  background: white;
  height: 100px;
  width: 100px;
  border-radius: 50%;
  grid-area: 1/1/3/2;
  margin-top: 10px;
  display: flex;
  justify-content: center;
  position: absolute;
}

.left-1 {
  left: 150px;
  top: 20px;
  height: 50px;
  width: 50px;
}

.left-2 {
  top: 60px;
  left: 60px;
}

.left-3 {
  top: 170px;
  left: 50px;
  height: 50px;
  width: 50px;
}

.right-1 {
  right: 150px;
  bottom: 30px;
  height: 50px;
  width: 50px;
}

.right-2 {
  bottom: 70px;
  right: 60px;
}

.right-3 {
  bottom: 180px;
  right: 50px;
  height: 50px;
  width: 50px;
}
```

------------------------------------------------------------------------

[Asymmetry]{.centered-title}

```{=html}
<!-- 
creating balance in an asymmetrical canvas isn't used as much because it's harder because it still needs to be balanced but it has to be balanced more carefully.
-->
```
::: single-image
<img src="https://s.studiobinder.com/wp-content/uploads/2022/06/The-Great-Wave-off-Kanagawa-by-Katsushika-Hokusai.png"/>
:::

```{=html}
<!--
a study on the best compositions (starry night). given all the ideas of symmetry people gravitate towards an asymmetrical canvass, probably because the world is not perfectly symmetrical

example of western and eastern art (the wave, could have had it in the middle or facing you but it wouldnt be famous if he did)

architecture 
-->
```

------------------------------------------------------------------------

[Asymmetry]{.centered-title}

::: single-image
<img src="https://images.pexels.com/photos/1878293/pexels-photo-1878293.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=2" style="height:500px;"/>
:::

------------------------------------------------------------------------

[Asymmetry]{.centered-title}

::: sym-3
::: wix-5
:::

::: wix-6
:::

::: wix-7
:::

::: wix-8
:::
:::

[https://www.siteinspire.com/]{.annotate}

```{css}
.wix-5 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/338/small.jpg");
}

.wix-6 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/333/small.jpg");
}

.wix-7 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/243/small.jpg");
}

.wix-8 {
    background-size: contain;
    background-repeat: no-repeat;
  background-image: url("https://siteinspire.s3.us-east-1.amazonaws.com/screengrabs/images/000/016/240/small.jpg");
}
```

------------------------------------------------------------------------

[Rule of Thirds]{.centered-title}

::: single-image
<img src="https://www.capturelandscapes.com/wp-content/uploads/2017/10/Greenland-Husky-Rule-of-Thirds.jpg"/>
:::

------------------------------------------------------------------------

[Rule of Thirds]{.centered-title}

::: single-image
<img src="https://wpswings.com/wp-content/uploads/2022/07/product-image-grids.png"/>
:::

------------------------------------------------------------------------

```{=html}
<!--
if you break a composition into 9 squares and put the key of the composition there it'll help the composition a great deal
-->
```
[Triad Composition]{.centered-title}

::: single-image
<img src="https://cdn.kastatic.org/ka-perseus-images/9413e3be098d33b2c7d987b6ac2ee2ed29745d3d.jpg" style="height:500px;"/>
:::

------------------------------------------------------------------------

[Triad Composition]{.centered-title}

::: single-image
<img src="https://cdn.kastatic.org/ka-perseus-images/9413e3be098d33b2c7d987b6ac2ee2ed29745d3d.jpg" style="height:500px;"/>
:::

::: line1
:::

::: line2
:::

::: line3
:::

```{css}
.line1 {
    border: solid 2.5px red;
    width: 0px;
    height: 250px;
    position: absolute;
    top: 200px;
    left: 450px;
    transform: rotate(25deg);
}

.line2 {
border: solid 2.5px red;
    width: 0px;
    height: 250px;
    position: absolute;
    top: 315px;
    left: 520px;
    transform: rotate(90deg);
}

.line3 {
border: solid 2.5px red;
    width: 0px;
    height: 270px;
    position: absolute;
    top: 190px;
    left: 570px;
    transform: rotate(150deg);
}
```

------------------------------------------------------------------------

```{=html}
<!--
there are intentional triangles in composition and lots of things written in mideavil text about it because your eye is contanstnly circling through the piece, especially post caravagio

- surrat
- edo style print
- swiss design
-->
```
[Triad Composition]{.centered-title}

::: triad-container
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/1200px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg"/> <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbu5yyBhCNUfdsQICcetODffn9toBHnK4M6g&amp;usqp=CAU"/> <img src="https://www.internationalposter.com/media/54013/swc24939.jpg"/>
:::

```{css}
.triad-container p {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    width: 90%;
    justify-content: center;
    margin: 0 auto;
    gap: 12px;
}

.triad-container img {
  height: 400px;
}
```

------------------------------------------------------------------------

```{=html}
<!--
large flat geometric shapes that is all about using and breaking grids obviously. if you want to study or make master copies this is a great place to start!
-->
```
::: full-width-container
Swiss Design <img src="https://i.pinimg.com/originals/8b/d5/af/8bd5af0aae4036306d85131a405a7d1f.jpg"/>
:::

------------------------------------------------------------------------

[Shapes]{.centered-title .move-down}

<div class="shapes">
<div class="shape-circle"></div>
<div class="shape-square"></div>
<div class="shape-triangle"></div>
</div>

```{=html}
<!--
- circles draw your eye, weather you like it or not your eye keeps getting drawn to them
-->
```

-----

[Saccade]{.centered-title}

::: single-image
<img src="http://schorlab.berkeley.edu/passpro/oculomotor/assets/images/Fig14-2.gif" style="height:400px;"/>
:::

```{=html}
<!--
when you are looking at something your eye is contasntly in motion, scanning, which is called saccade. this movement happens in a hierarchy where things that are moving are the most important, then bright colors, and also circles
-->
```
```{=html}
<!--
you can see that the viewer scans around in a circle but you can also see how drawn into the eye the viewer got. This is also why humans see faces everywhere like how an outlet is a smily face
-->
```

---


<div class="optical-alignment move-down">
<div>Optical Alignment</div>
<img src="./../../assets/images/2-best-practices/layout/optical_alignment0.webp"/>
</div>

-----

<div class="optical-alignment move-down">
<div>Optical Alignment</div>
<img src="./../../assets/images/2-best-practices/layout/optical_alignment1.webp"/>
</div>

----

<div class="optical-alignment move-down">
<div>Optical Alignment</div>
<img src="./../../assets/images/2-best-practices/layout/optical_alignment2.webp"/>
</div>

---

<div class="optical-alignment move-down">
<div>Optical Alignment</div>
<img src="./../../assets/images/2-best-practices/layout/optical_alignment3.webp"/>
</div>

---

[Diagonals]{.centered-title}

::: diagonal-container
<img src="https://alyssahabner.weebly.com/uploads/1/9/0/6/19062513/4386035.jpg"/><img src="https://img.artrabbit.com/events/zaha-hadid-architecture-design-and-related-arts/images/jnZLovkdaepb/1500x1125/Heydar-Aliyev-Center.jpg"/>
:::

```{css}
.diagonal-container p {
    width: 60%;
    margin: 0 auto;
    gap: 20px;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
}
```

------------------------------------------------------------------------

[Diagonals]{.centered-title}

::: centered
<img src="https://cdn.dribbble.com/users/486050/screenshots/4078807/iponweb-website-home.jpg"/>dribbble.com
:::

```{css}
.centered {
  display: flex;
    justify-content: center;
    width: 100%;
    flex-direction: column;
    align-items: center;
}

.centered img {
    height: 450px;
}
```

```{=html}
<!-- 
diagonals reign supreme in architecture, "the greatest..." probably because they're a little more rare but we can use these in web design too!
-->
```

------------------------------------------------------------------------

[Scale]{.centered-title}

::: triad-container
<img src="https://static-cse.canva.com/blob/565943/mcdonaldsmcdonaldswakeupoutdoorprint389486adeevee.jpg"/> <img src="https://designshack.net/wp-content/uploads/famouscampaigns-7.jpg"/> <img src="https://sendgrid.com/wp-content/uploads/2019/07/Lyft-email.png"/>
:::

```{=html}
<!--
simple but SO effective - if we change the scale of an image it can become a piece of the grid or layout rather than plopping it on the page. you can take boring images and make it dynamic using scale, cropping, and angle!
-->
```

------------------------------------------------------------------------

:::move-down
<img src="./../../assets/images/2-best-practices/app_screenshot.png" style="filter:drop-shadow(10px 7px 4px gray);"/>

```{=html}
<!--
the image itself is not important, the table is, but its pushed into the background and provides texture
-->
```
:::

------------------------------------------------------------------------

::: {.grid-intro .move-down}
::: grid-left
<br>

<h2>Anchoring</h2>

<br>

<p>The architecture of space</p>
:::

::: grid-right
<img src="https://miro.medium.com/v2/resize:fit:758/1*i8PNKHgpwN4oiOiDzY2LjA.png" style="height:600px;"/>
:::
:::

```{=html}
<!-- while this grid isn't even, things do snap to the grid, and believe me, if these weren't anchored you would hate this page. And it's not even like it's perfect things align relative to one another, but they are not thrown onto the page. Now you can pull down designs and anchor! (activity?)

now when a designer tells you to move things around and as a developer you're like but that's hard, it's because the entire design breaks apart if you move everything out of its anchoring!
-->
```

```{=html}
<!-- 
noticing your way around a building, you notice its open or its maze like, that's the same as layout, if your confused where to go then the website inst working as you expected.
-->
```

<!-- grid examples, alignment logic, this is what you're going to be employing. don't start in the browser because you're in problem solving mode, the quickest most efficient path - but that doesn't make for good design!! -->

<!-- but its also important to break the grid because if its too systematic it's too predictable!! -->

## Introduction to bslib layouts

<br/>

3 main layouts [^mixed]:

- Columns (grid): `layout_columns()`.
- Sidebar: `layout_sidebar()`.
- Multi pages: `page_navbar()`.

[^mixed]: any sophisticated layout can be created starting from one of these 3 base layouts.

## Column-based layout

<br/>

`layout_column_wrap()` is a simplified interface to CSS [grid](https://css-tricks.com/snippets/css/complete-guide-grid/).

::: {.panel-tabset}

### Fixed columns

:::: {.columns}

::: {.column width="50%"}
![](./../../assets/movies/2-best-practices/layout/fixed-cols.mov){width="100%"}
:::

::: {.column width="50%"}
```{r, eval=FALSE, echo=TRUE}
layout_column_wrap(
  width = 1/2, height = 300,
  card1, card2, card3
)
```
:::

::::


### Responsive columns

3 cards of 200px require at least a viewport of 600px to display
side by side.

:::: {.columns}

::: {.column width="50%"}
![](./../../assets/movies/2-best-practices/layout/responsive-cols.mov){width="100%"}
:::

::: {.column width="50%"}
```{r, eval=FALSE, echo=TRUE}
layout_column_wrap(
  width = "200px", height = 300,
  card1, card2, card3
)
```
:::

::::

### Fixed width

:::: {.columns}

::: {.column width="50%"}
![](./../../assets/movies/2-best-practices/layout/fixed-width.mov){width="100%"}
:::

::: {.column width="50%"}
```{r, eval=FALSE, echo=TRUE}
layout_column_wrap(
  width = "200px", height = 300,
  fixed_width = TRUE,
  card1, card2, card3
)
```
:::

::::


:::

## Your turn: nested layouts `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

With your fresh `{bslib}` knowledge, try to reproduce the following
layout.

::: {.panel-tabset}

## Exercise

![](./../../assets/images/2-best-practices/layout/nested-columns){width=100%}

## Solution

```{r, eval=FALSE, echo=TRUE}
layout_column_wrap(
  width = 1/2,
  height = 300,
  card1,
  layout_column_wrap(
    width = 1,
    heights_equal = "row",
    card2, card3
  )
)
```

:::

## Sidebar layout

<br/>

:::: {.columns}

::: {.column width="50%}
```{r, eval=TRUE, echo=FALSE}
describe_layout_function(
  "layout_sidebar()",
  "<small>A sidebar layout.</small>",
  card_body(
    class = "p-2",
    height = 200,
    layout_sidebar(
      sidebar = sidebar("Sidebar", width = "33%", class = "bg-light"),
      "Main contents"
    ) |>
      tagAppendAttributes(class = "border rounded-top")
  )
)
```
:::

::: {.column width="50%"}
```r
layout_sidebar(
  sidebar = sidebar("Sidebar"),
  "Main contents"
)
```
:::

::::

::: {.callout-tip}
Best practice:

  - Sidebar: for global __inputs__.
  - Main content: for __outputs__ (with optional local inputs).
  
:::

## Your turn: nested sidebars `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

::: {.panel-tabset}

## Exercise

Taking a basic `layout_sidebar` and looking at `?bslib::sidebar`, find a way to create another sidebar on the right side.

```{r, eval=TRUE, echo=FALSE}
describe_layout_function(
  element = card_body(
    class = "p-2",
    height = 200,
    layout_sidebar(
      sidebar = sidebar("Left sidebar", width = "33%", class = "bg-light"),
      layout_sidebar(
        sidebar = sidebar("Right sidebar", position = "right"),
        "Main contents"
      ),
      fillable = TRUE,
      class = "p-0"
    ) |>
      tagAppendAttributes(class = "border rounded-top")
  )
)
```

::: {.callout-tip collapse="true" title="Hint"}
Add `fillable = TRUE` and `class = "p-0"` to the main `layout_sidebar` function.
:::

## Solution

```{r, eval=FALSE, echo=TRUE}
layout_sidebar(
  sidebar = sidebar("Left sidebar", width = "33%", class = "bg-light"),
  layout_sidebar(
    sidebar = sidebar("Right sidebar", position = "right"),
    "Main contents",
    fillable = TRUE, # fillable, taking all vertical space
    class = "p-0" # zero padding
  )
)
```

:::

## Dashboard layout

<br/>

:::: {.columns}

::: {.column width="50%"}
```{r, eval=TRUE, echo=FALSE}
tmp <- page_sidebar(
  title = h1(
    "My dashboard",
    # Have to add inline CSS since
    # Quarto fails with this class...
    style = "background-color: #212529;
      color: #fff;
      font-size: 1.5rem;
      font-weight: 300;
      padding: var(--bslib-spacer, 1rem);
      padding-left: 1.5rem;
      margin-bottom: 0;
    "
  ),
  sidebar = "Sidebar",
  "Main content area"
)

# Add some borders for nicer rendering. This is
# ugly but for some reasons htmltools::tagQuery
# does not want to work on page_sidebar ...
tmp[[5]][[1]]$children[[2]]$attribs$class <- paste(
  tmp[[5]][[1]]$children[[2]]$attribs$class,
  "border rounded-top"
)

describe_layout_function(
  "page_sidebar()",
  "<small><code>layout_sidebar()</code> with title.</small>",
  element = card_body(
    class = "p-2",
    height = 300,
     tmp
  )
)
```
:::

::: {.column width="50%"}
```{r, eval=FALSE, echo=TRUE}
page_sidebar(
  title = "My dashboard",
  sidebar = "Sidebar",
  "Main content area"
)
```
:::

::::

::: {.callout-tip}
Best practice:

  - Sidebar: for global __inputs__.
  - Main content: for __outputs__ (local inputs).
  
:::

## Your turn: dashboard layouts `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

::: {.panel-tabset}

## Exercise

Take the previous dashboard example and add an input and ouput of your choice.

## Solution

```{r, eval=FALSE, echo=TRUE}
library(shiny)
library(bslib)

ui <- page_sidebar(
  title = "My dashboard",
  sidebar = tagList(
    sliderInput(
      "obs", 
      "Number of observations:",
      min = 0, 
      max = 1000, 
      value = 500
    )
  ),
  plotOutput("distPlot")
)

shinyApp(ui, function(input, output) {
  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })
})
```

:::

## Multi pages layout

<br/>

For more complex dashboards:

  - Replace `page_sidebar` by `page_navbar`.
  - Use `nav_panel` for each body tab.

<br/>

:::: {.columns}

::: {.column width="50%"}
![](./../../assets/movies/2-best-practices/layout/page-navbar.mov){width="100%"}
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
page_navbar(
  title = "Multi pages",
  nav_panel("Tab 1", "Tab 1 content"),
  nav_panel("Tab 2", "Tab 2 content")
)
```
:::

::::


## Your turn: tab-specific sidebar `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

Until now, we only had shared sidebars.

::: {.panel-tabset}

## Exercise

Take the previous `page_navbar` template and try to add a dedicated sidebar for each `nav_panel`.

::: {.callout-tip collapse="true" title="Hint"}
Don't forget that each `nav_panel` is a container which can host its own layout.
:::

## Solution
```{r, eval=FALSE, echo=TRUE}
library(shiny)
library(bslib)

ui <- page_navbar(
  title = "Multiple sidebars",
  nav_panel(
    "Tab 1", 
    layout_sidebar(
      sidebar = sidebar("Sidebar tab 1"),
      "Tab 1 content"
    )
  ),
  nav_panel(
    "Tab 2", 
    layout_sidebar(
      sidebar = sidebar("Sidebar tab 2"),
      "Tab 2 content"
    )
  )
)

shinyApp(ui, function(input, output) {
  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })
})
```

:::

## bslib components overview

<br/>

Let's review the most outstanding `{bslib}` components:

1. Cards.
2. Tabs.
3. Accordions. 
4. Value boxes.

::: {.callout-tip collapse="true" title="Hint"}
Most (if not all) `{bslib}` components have a `class` parameter to style them 🎨. They are also browsable, meaning typing `card("My card")` in the R console will show a card in the viewer panel 🎁
:::

## Cards

<br/>

A card is a __rectangular container__ for organizing __related__ content, through a more __appealing__ design. 

<br/>

:::: {.columns}

::: {.column width="50%"}
```{r, echo=FALSE, eval=TRUE}
describe_layout_function(
  "Card header: card_header()",
  "<small>Card footer: card_footer()</small>",
  element = layout_sidebar(
    sidebar = sidebar("Card sidebar"),
    "Card body content",
    fillable = TRUE
  ),
  full_screen = TRUE
)
```
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
card(
  full_screen = TRUE,
  card_header("Card header"),
  # If not passed explicitly, elements are wrapped inside
  # card_body ...
  layout_sidebar(
    sidebar = sidebar("Card sidebar"),
    "Card body content",
    fillable = TRUE
  ),
  card_footer("Card footer")
)
```
:::

::::

::: {.callout-tip collapse="true" title="Hint"}
Pass `full_screen = TRUE` to make the card maximizable.
:::


## Your turn: multiple cards `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

::: {.panel-tabset}

## Exercise

Combine `layout_columns_wrap()` and `card()` to create a grid composed of 3 columns and 2 rows. Then play with the screen width and conclude.

::: {.callout-tip collapse="true" title="Hint"}
You can create those 6 cards programmatically with `lapply()` and pass them with `!!!` inside `layout_columns_wrap()` ([introduced](https://shiny.posit.co/r/reference/shiny/1.7.0/upgrade.html) in `{shiny}` 1.7.0).
:::

## Solution
```{r, eval=FALSE, echo=TRUE}
cards <- lapply(1:6, function(i) {
  card(sprintf("Card %s", i))
})

layout_column_wrap(
  width = 1/3,
  height = 300,
  !!!cards
)
```
:::

## Tabs

<br/>

Tabs allow to organize related content over __multiple pages__ [^not_exactly]. 

They can be part of navbars (navigation), cards or standalone.

<br/>

:::: {.columns}

::: {.column width="50%"}
![](./../../assets/images/2-best-practices/layout/tabset.png){width="100%"}
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
navset_tab(
  nav_panel(title = "One", p("First tab content.")),
  nav_panel(title = "Two", p("Second tab content."))
)
```
:::


::::

[^not_exactly]: This is not really multiple page from an HTML point of view... but anyway :)

## 🥼 Your turn: tabs within cards `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

::: {.panel-tabset}

## Exercise

Have a look at `?navset_card_tab` to include tabs within a card. Try out with `navset_card_pill`.

::: {.callout-tip collapse="true" title="Hint"}
All those functions have a server [part](https://rstudio.github.io/bslib/reference/nav_select.html) to programmatically add/remove/select tabs. When doing so, pass an `id` to the parent container like `navset_card_tab(id = ..., ...)`. 
:::

## Solution
```{r, eval=FALSE, echo=TRUE}
panels <- list(
  nav_panel(title = "One", p("First tab content.")),
  nav_panel(title = "Two", p("Second tab content."))
)

# Tabs
navset_card_tab(!!!panels)

# Pills
navset_card_pill(!!!panels)
```
:::

## Accordions

<br/>

Accordions are made of __collapsible__ elements to organize content in the same container.

<br/>

:::: {.columns}

::: {.column width="50%"}
```{r, echo=FALSE, eval=TRUE}
panels <- lapply(1:3, function(i) {
  accordion_panel(
    sprintf("Item %s", i),
    sprintf("Content %s", i)
  )
})

describe_layout_function(
  "accordion()",
  "<small>Child elements are <code>accordion_panel()</code></small>",
  element = accordion(
    multiple = FALSE,
    !!!panels
  )
)
```
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
panels <- lapply(1:3, function(i) {
  accordion_panel(
    sprintf("Item %s", i),
    sprintf("Content %s", i)
  )
})
accordion(
  # pass FALSE to have only 1 item open at a time
  multiple = FALSE,
  !!!panels
)
```
:::

::::

::: {.callout-tip collapse="true" title="Hint"}
You can see an accordion as a group of collapsible cards, to save vertical space.
:::

## 🥼 Your turn: accordion and sidebars `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

::: {.panel-tabset}

## Exercise

Combine `layout_sidebar()` to `accordion` to better organize input parameters within the following example.

```{r, eval=TRUE, echo=FALSE}
describe_layout_function(
  element = layout_sidebar(
    sidebar = sidebar(
      textInput("xlab", "X label", "x vals"),
      numericInput(
        "obs", 
        "Number of observations:",
        min = 0, 
        max = 1000, 
        value = 500
      ),
      textInput("ylab", "Y label", "y yals"),
    ),
    "An imaginary plot"
  )
)

```

## Solution
```{r, eval=FALSE, echo=TRUE}
layout_sidebar(
  sidebar = sidebar(
    accordion(
      accordion_panel(
        icon = bs_icon("file-bar-graph"),
        "Value",
        numericInput(
          "obs", 
          "Number of observations:",
          min = 0, 
          max = 1000, 
          value = 500
        )
      ),
      accordion_panel(
        "Axis",
        icon = bs_icon("body-text"),
        textInput("xlab", "X label", "vals"),
        textInput("ylab", "Y label", "yals")   
      )
    )
  ),
  "An imaginary plot"
)
```

:::


## Value boxes

<br/>

Value boxes are __tiny card containers__ dedicated to highlight a specific __metric__.

<br/>

::: {.panel-tabset}

### Left-center layout

:::: {.columns}

::: {.column width="50%}
```{r, eval=TRUE, echo=FALSE}
describe_layout_function(
  "value_box()",
  "<small>Value boxes can also receive <code>full_screen = TRUE</code>.</small>",
  element = value_box(
    title = "Title",
    value = "value",
    showcase = bs_icon("graph-up"),
    showcase_layout = showcase_left_center(),
    "description",
    theme = "success"
  )
)
```
:::

::: {.column width="50%}
```{r, eval=FALSE, echo=TRUE}
# Value box 1
value_box(
  title = "Title",
  value = "value",
  showcase = bs_icon("graph-up"),
  showcase_layout = showcase_left_center(),
  "description",
  theme = "success"
)
```
:::

::::

### Top-right layout

:::: {.columns}

::: {.column width="50%}
```{r, eval=TRUE, echo=FALSE}
describe_layout_function(
  "value_box()",
  "<small> With <code>showcase_top_right()</code></small>",
  element = value_box(
    title = "Title",
    value = "value",
    showcase = bs_icon("pie-chart"),
    showcase_layout = showcase_top_right(),
    "description"
  )
)
```
:::

::: {.column width="50%}
```{r, eval=FALSE, echo=TRUE}
# Value box 1
value_box(
  title = "Title",
  value = "value",
  showcase = bs_icon("pie-chart"),
  showcase_layout = showcase_top_right(),
  "description"
)
```
:::

::::

### Bottom layout

:::: {.columns}

::: {.column width="50%}
```{r, eval=TRUE, echo=FALSE}
describe_layout_function(
  "value_box()",
  "<small> With <code>showcase_bottom()</code></small>",
  element = value_box(
    title = "Title",
    value = "value",
    showcase = sparkline_plot(),
    showcase_layout = showcase_bottom()
  )
)
```
:::

::: {.column width="50%}
```{r, eval=FALSE, echo=TRUE}
# Value box 1
value_box(
  title = "Title",
  value = "value",
  showcase = sparkline_plot(),
  showcase_layout = showcase_bottom()
)
```
:::

::::

:::

::: {.callout-tip collapse="true" title="Hint"}
Value box can receive plots but more treatment is required to have a good rendering when the card is minimized. Please see [here](https://rstudio.github.io/bslib/articles/value-boxes/index.html#expandable-sparklines).
:::


## 🥼 Your turn: a value box themer `r countdown(minutes = 3, seconds = 0, top = 0)`

<br/>

Spend few minutes to play with the below value box generator.

```{=html}
<iframe width="100%" height="800" src="https://bslib.shinyapps.io/build-a-box/" title="Quarto Documentation"></iframe>
```

## 🥼 Your turn: `{shinyMons2}` layout `r countdown(minutes = 30, seconds = 0, top = 0)`

<br/> 

Considering the __wireframing__ obtained in the previous part, create a new `{bslib}` layout which illustrates the most your original idea.

<br/>

::: {style="font-size: 75%;"}
1. Switch to the `fresh-start ` git branch, which has the 7 modules but without any existing UI nor server.
2. `mod_poke_select` does not need to be changed. 
3. For each module in the `R` folder, you'll see `WORKSHOP TO DO`. Looking at `poke_data`, complete each module with your layout.
4. You can run the app by sourcing the `./app.R` script ...
:::

::: {.callout-tip collapse="true" title="Hint"}
Module files are like `./R/mod_poke_*.R`. You may not need all modules depending on the wireframe. To go faster, you may assign 1 module per person in your team.
:::

. . .


Time to check what you all did 😃 `r countdown(minutes = 15, bottom = 5)`
