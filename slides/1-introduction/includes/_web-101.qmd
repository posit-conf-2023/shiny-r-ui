# Web languages 101 {data-stack-name="Web 101"}

## Forewords

Mastering HTML and CSS is clearly not the goal of this workshop but you need to know where all of this come from to move to the next part.

------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

ABOUT HTML

</div>

<div>

Intro

</div>
:::
:::

::: rhs
::: content
::: code
[\<]{.green}[h1]{.red}[\>]{.green}Hello[\<]{.blue}[h1]{.red}[/]{.blue}[\>]{.blue}
:::

::: explained
HTML is the __markup language__ of the internet, where elements are written with [opening]{.green} and [closing]{.blue}__tags__. <br/><br/> The tag here is [h1]{.red}, the highest level header. There are **many** types of tags.
:::
:::

::: color-footnote
::: footnote-text
This is the same as `# Hello!` in .Rmd
:::
:::
:::
:::

------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

ABOUT HTML

</div>

<div>

Attributes: ID

</div>
:::
:::

::: rhs
::: content
::: {.code .small}
\<h1 [id="top_header"]{.red} \> Hello! \<h1\>
:::

::: explained
elements can have __attributes__ that are specified using `attribute="value"`. Here we've given our top level element the ID `top_header`.
:::
:::

::: color-footnote
::: footnote-text
You cannot have more than one element with the same id in an HTML document!
:::
:::
:::
:::

------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

ABOUT HTML

</div>

<div>

Attributes: class

</div>
:::
:::

::: rhs
::: content
::: {.code .small}
\<h1 id="top_header" [class="red_header"]{.red}\>Hello!\<h1\>
:::

::: explained
The class attribute can be used on __multiple__ elements. While the `top_header` ID can only be used once, we can create many headers with the class `red_header`
:::
:::

::: color-footnote
::: footnote-text
:::
:::
:::
:::

------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

HTML and LAYOUT

</div>

<div>

Box model

</div>
:::
:::

::: rhs
::: content
<img src="./../../assets/images/1-introduction/box-model.png"/></img>

::: explained
HTML tags follow the __box model__ defining margins (space between elements), padding (internal margin), borders, width and height, ...
:::
:::
:::
:::

------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

HTML and LAYOUT

</div>

<div>

Flow layout

</div>
:::
:::

::: rhs
::: content
<img src="./../../assets/images/1-introduction/flow-layout.png"/></img>

::: explained
HTML tags lay in the page following the __flow layout__: __inline__ tags flow in the horizontal direction, while __block__ tags are stacked on top of each others.
:::
:::
:::
:::

------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

HTML

</div>

<div>

Semantic tags

</div>
:::
:::

::: rhs
::: content
<img src="./../../assets/images/1-introduction/html-semantic.png" height="300" width="179"></img>

::: explained
HTML tags can have a semantic contrary to `div`. 
:::
:::
:::
:::


## CSS

Cascading Style Sheets (CSS) is a property/rules based languages that lies next to HTML to style elements.

CSS supports more sofisticated layouts such as:

- [flexbox](https://www.w3schools.com/css/css3_flexbox.asp).
- [grid](https://www.w3schools.com/css/css_grid.asp).


------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

COMBINE HTML AND CSS

</div>

<div>

Style HTML tags with CSS

</div>
:::
:::

::: rhs
::: content
::: {.code .small}
\<h1 [id]{.red}="top_header" class="red_header"\>Hello!\<h1\> <img src="./../../assets/images/2-best-practices/color/css_rule.png"/></img>
:::

::: explained
We can use CSS to create styling rules outside of our HTML, leveraging their __attributes__.
:::
:::
:::
:::

------------------------------------------------------------------------

::: color-code-slide
::: lhs
::: color-css-title
<div>

About CSS 

</div>

<div>

Specificity

</div>
:::
:::

::: rhs
::: content
::: explained
<ul class="specificity-chart">

<li>important!</li>

<li>inline</li>

<li>ID</li>

<li>class</li>

<li>element</li>

</ul>

<img src="./../../assets/images/2-best-practices/color/important.png"/></img>

Decreasing specificity from left to right.

:::
:::
:::
:::

## Exercise: about the developer inspector

```{r, eval=TRUE, echo=FALSE}
countdown(minutes = 2, seconds = 0)
```

1. Run the below app and open it with __Google Chrome__:

```r
ui <- fluidPage(p("Hello World"))
server <- function(input, output, session) {}
shinyApp(ui, server)
```

2. Do `CTRL + SHIFT + C` Linux, `F12` Windows, or `Command + SHIFT + C` on Mac (or just right click + inspect).

## Modern web toolkits

Benefit from more advanced CSS features such as __grid__.

:::: {.columns}

::: {.column width="50%"}
![](./../../assets/images/1-introduction/bootstrap-logo.svg)
:::

::: {.column width="50%"}
![](./../../assets/images/1-introduction/fluent-ui.png)
:::

::::

## About `{bslib}`

During this workshop, we'll leverage [`{bslib}`](https://rstudio.github.io/bslib/index.html) for the layout and colors, so you can focus on the features, rather than on the technical HTML and CSS aspects.

```r
install.packages("bslib")
```

Under the hood, `{bslib}` offers a R abstraction for the Bootstrap framework.

## More 

- [CSS](https://unleash-shiny.rinterface.com/beautify-css) for Shiny.
- [Sass](https://unleash-shiny.rinterface.com/beautify-sass) for Shiny.